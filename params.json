{"name":"Node-api-utils","tagline":"A collection of things I like to use when building web APIs in Node.js","body":"## Install it\r\n\r\n```\r\nnpm install projectweekend/Node-API-Utils\r\n```\r\n\r\n------------\r\n\r\n\r\n### Authentication\r\n\r\n#### Generate JSON web token\r\n\r\n```javascript\r\nvar authUtils = require( \"api-utils\" ).authentication;\r\n\r\n\r\nvar token = authUtils.generateJWT( user, [ \"id\", \"email\", \"role\" ] );\r\n```\r\n\r\n**Parameters:**\r\n\r\n* A user object to serialize into a token\r\n* An array of user properties to include in the serialization\r\n\r\n\r\n#### Middleware requiring a system-wide API key\r\n\r\n```javascript\r\nvar authUtils = require( \"api-utils\" ).authentication;\r\n\r\n\r\n// Assuming an Express or Restify server is defined as 'server'\r\nserver.use( authUtils.systemAPIKey( [ \"/skip-this-route\" ] ) );\r\n```\r\n\r\n**Parameters:**\r\n\r\n* An array of routes to skip API check (optional)\r\n\r\n**Notes:**\r\n\r\n* `SYSTEM_API_KEY` environment variable must be defined\r\n\r\n------------\r\n\r\n\r\n### Blitz.io\r\n\r\n#### Authorization route for Blitz.io load testing\r\n\r\n```javascript\r\nvar blitzio = require( \"api-utils\" ).blitzio;\r\n\r\n\r\n// Assuming an Express or Restify server is defined as 'server'\r\nserver.get( blitzio.url(), blitzio.handler );\r\n```\r\n\r\n**Parameters: None**\r\n\r\n**Notes:**\r\n\r\n* `BLITZ_KEY` environment variable must be defined\r\n\r\n------------\r\n\r\n\r\n### Database\r\n\r\n#### Mongoose connection with Fig DB fallback\r\n\r\n```javascript\r\nvar databaseUtils = require( \"api-utils\" ).database;\r\n\r\n\r\nvar db = databaseUtils.mongooseConnection();\r\n```\r\n\r\n**Parameters: None**\r\n\r\n**Notes:**\r\n\r\n* `MONGO_URL` environment variable must be defined if not starting the app with Fig (`fig up`)\r\n\r\n------------\r\n\r\n\r\n### Responses\r\n\r\n#### Common HTTP Response Callbacks\r\n\r\n```javascript\r\nvar responses = require( \"api-utils\" ).responses;\r\n\r\n\r\nexports.create = function ( req, res, next ) {\r\n\r\n    // Send a 201 and the database result, or pass error to handler middleware\r\n    CreateSomethingInDatabase( thingToCreate, responses.createdResponse( res, next ) );\r\n\r\n};\r\n\r\n// Other responses:\r\n\r\n// Send a 201 and the database result, or pass error to handler middleware.\r\n// Behaves like a detail response and sends 404 when parent document is not found\r\nresponses.nestedCreateResponse\r\n\r\n// Send 200 and result, or pass error to handler\r\nresponses.listResponse\r\n\r\n// Send 200 and result, or pass error to handler. Sends a 404 when the result is empty.\r\nresponses.detailResponse\r\n\r\n// Send 204 and no body, or pass error to handler. Sends a 404 when the result is empty.\r\nresponses.deleteResponse\r\n```\r\n\r\n\r\n### Errors\r\n\r\n#### Common HTTP errors\r\n\r\n```javascript\r\nvar errors = require( \"api-utils\" ).errors;\r\n\r\n\r\nerrors.system( \"Something went wrong on the server\" );\r\n\r\nerrors.auth( \"Invalid credentials\" );\r\n\r\nerrors.notAuthorized( \"You can't do that!\" );\r\n\r\nerrors.resourceNotFound( \"That doesn't exist\" );\r\n\r\nerrors.conflict( \"Email is in use\" );\r\n```\r\n\r\n**Notes:**\r\n\r\n* Each error function takes a `message` parameter and returns a JavaScript `Error` with the `status` property set to the appropriate HTTP code, so you can pass these to `next()` and let Express middleware do the rest.\r\n\r\n------------\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}